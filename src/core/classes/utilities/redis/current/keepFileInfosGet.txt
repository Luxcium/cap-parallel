f => {
        //
        const pathStr = `${collctn.fullPath}/${f}`;
        //
        const stats = statSync(pathStr);
        const dirname = path.dirname(pathStr);
        const parsed = path.parse(pathStr);
        const dir = srtPath(parsed.dir);
        const displaycount = `¹${count} ²${count2} ³${count3++}`;
        //
        const fileInfo = {
          ...stats,
          ...listings.count,
          ...getThisFileType(f),
          dirname: srtPath(dirname),
          extname: path.extname(pathStr),
          isAbsolute: path.isAbsolute(pathStr),
          normalized: srtPath(path.normalize(pathStr)),
          ...parsed,
          dir,
          toNamespacedPath: srtPath(path.toNamespacedPath(pathStr)),
          userDirName: user.shortName,
          collectionDirName: collctn.shortName,
          keywords: collctn.shortName
            .split('-')
            .filter(csn => csn !== '')
            .filter(csn => isNaN(csn as unknown as number))
            .filter(csn => csn.length > 1)
            .slice(0, -1)
            .sort()
            .sort((a, b) => b.length - a.length),
          xDir: collctn.shortName
            .split('-')
            .filter(csn => csn !== '')
            .slice(-1)[0],
          fileName: f,
          displaycount,
        };

        if (opts.DEBUG > 5) console.log(`${f}:`, fileInfo);
        return fileInfo;
      });

      return filesInfoGenerator;
    });

    return collectionLevelGen;
    // return user.full;
  });
